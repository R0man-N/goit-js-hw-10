{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  let userSelectedDate;\n\n  const options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) {\n      userSelectedDate = selectedDates[0];\n      const currentDate = new Date();\n\n      if (userSelectedDate < currentDate) {\n        document.querySelector('[data-start]').disabled = true;\n        iziToast.error({\n          title: 'Error',\n          message: 'Please choose a date in the future',\n        });\n      } else {\n        document.querySelector('[data-start]').disabled = false;\n      }\n    },\n  };\n\n  flatpickr('#datetime-picker', options);\n\n  document.querySelector('[data-start]').addEventListener('click', function () {\n    this.disabled = true;\n\n    const intervalId = setInterval(function () {\n      const currentDate = new Date();\n      const timeDifference = userSelectedDate - currentDate;\n\n      if (timeDifference <= 0) {\n        clearInterval(intervalId);\n        updateTime(0);\n        iziToast.success({\n          title: 'Success',\n          message: 'Timer reached zero!',\n        });\n      } else {\n        updateTime(timeDifference);\n      }\n    }, 1000);\n  });\n\n  function updateTime(ms) {\n    const { days, hours, minutes, seconds } = convertMs(ms);\n\n    document.querySelector('[data-days]').textContent = addLeadingZero(days);\n    document.querySelector('[data-hours]').textContent = addLeadingZero(hours);\n    document.querySelector('[data-minutes]').textContent =\n      addLeadingZero(minutes);\n    document.querySelector('[data-seconds]').textContent =\n      addLeadingZero(seconds);\n  }\n\n  function convertMs(ms) {\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n\n    const days = Math.floor(ms / day);\n    const hours = Math.floor((ms % day) / hour);\n    const minutes = Math.floor(((ms % day) % hour) / minute);\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n    return { days, hours, minutes, seconds };\n  }\n\n  function addLeadingZero(value) {\n    return value < 10 ? `0${value}` : value;\n  }\n});\n"],"names":["userSelectedDate","options","selectedDates","currentDate","flatpickr","intervalId","timeDifference","updateTime","ms","days","hours","minutes","seconds","convertMs","addLeadingZero","value"],"mappings":"wIAGA,SAAS,iBAAiB,mBAAoB,UAAY,CACxD,IAAIA,EAEJ,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBF,EAAmBE,EAAc,GACjC,MAAMC,EAAc,IAAI,KAEpBH,EAAmBG,GACrB,SAAS,cAAc,cAAc,EAAE,SAAW,GAClD,SAAS,MAAM,CACb,MAAO,QACP,QAAS,oCACnB,CAAS,GAED,SAAS,cAAc,cAAc,EAAE,SAAW,EAErD,CACL,EAEEC,EAAU,mBAAoBH,CAAO,EAErC,SAAS,cAAc,cAAc,EAAE,iBAAiB,QAAS,UAAY,CAC3E,KAAK,SAAW,GAEhB,MAAMI,EAAa,YAAY,UAAY,CACzC,MAAMF,EAAc,IAAI,KAClBG,EAAiBN,EAAmBG,EAEtCG,GAAkB,GACpB,cAAcD,CAAU,EACxBE,EAAW,CAAC,EACZ,SAAS,QAAQ,CACf,MAAO,UACP,QAAS,qBACnB,CAAS,GAEDA,EAAWD,CAAc,CAE5B,EAAE,GAAI,CACX,CAAG,EAED,SAASC,EAAWC,EAAI,CACtB,KAAM,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUL,CAAE,EAEtD,SAAS,cAAc,aAAa,EAAE,YAAcM,EAAeL,CAAI,EACvE,SAAS,cAAc,cAAc,EAAE,YAAcK,EAAeJ,CAAK,EACzE,SAAS,cAAc,gBAAgB,EAAE,YACvCI,EAAeH,CAAO,EACxB,SAAS,cAAc,gBAAgB,EAAE,YACvCG,EAAeF,CAAO,CACzB,CAED,SAASC,EAAUL,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACvC,CAED,SAASE,EAAeC,EAAO,CAC7B,OAAOA,EAAQ,GAAK,IAAIA,IAAUA,CACnC,CACH,CAAC"}